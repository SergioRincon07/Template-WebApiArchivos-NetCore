// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;
using WebApiArchivos.DataBaseArchivos.Models;

namespace WebApiArchivos.DataBaseArchivos.Context
{
    public partial class ArchivosContext
    {
        private IArchivosContextProcedures _procedures;

        public virtual IArchivosContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new ArchivosContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IArchivosContextProcedures GetProcedures()
        {
            return Procedures;
        }

        protected void OnModelCreatingGeneratedProcedures(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<SpGetAlmacenamientoResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SpGetArchivoEspecificoResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<spLoginAlmacenamientoResult>().HasNoKey().ToView(null);
        }
    }

    public partial class ArchivosContextProcedures : IArchivosContextProcedures
    {
        private readonly ArchivosContext _context;

        public ArchivosContextProcedures(ArchivosContext context)
        {
            _context = context;
        }

        public virtual async Task<List<SpGetAlmacenamientoResult>> SpGetAlmacenamientoAsync(int? IdAlmacenamiento, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IdAlmacenamiento",
                    Value = IdAlmacenamiento ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SpGetAlmacenamientoResult>("EXEC @returnValue = [dbo].[SpGetAlmacenamiento] @IdAlmacenamiento", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SpGetArchivoEspecificoResult>> SpGetArchivoEspecificoAsync(string IdArchivo, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IdArchivo",
                    Size = 100,
                    Value = IdArchivo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SpGetArchivoEspecificoResult>("EXEC @returnValue = [dbo].[SpGetArchivoEspecifico] @IdArchivo", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<spLoginAlmacenamientoResult>> spLoginAlmacenamientoAsync(string Keyname, string Password, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Keyname",
                    Size = 50,
                    Value = Keyname ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Password",
                    Size = 20,
                    Value = Password ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spLoginAlmacenamientoResult>("EXEC @returnValue = [dbo].[spLoginAlmacenamiento] @Keyname, @Password", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> spRegistrarArchivoAsync(Guid? IdArchivo, string Nombre, string Extension, string MimeType, string Ruta, int? IdAlmacenamiento, int? IdAplicacion, long? ByteLenght, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IdArchivo",
                    Value = IdArchivo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "Nombre",
                    Size = 200,
                    Value = Nombre ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Extension",
                    Size = 10,
                    Value = Extension ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MimeType",
                    Size = 50,
                    Value = MimeType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Ruta",
                    Size = 1000,
                    Value = Ruta ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdAlmacenamiento",
                    Value = IdAlmacenamiento ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdAplicacion",
                    Value = IdAplicacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ByteLenght",
                    Value = ByteLenght ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[spRegistrarArchivo] @IdArchivo, @Nombre, @Extension, @MimeType, @Ruta, @IdAlmacenamiento, @IdAplicacion, @ByteLenght", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
